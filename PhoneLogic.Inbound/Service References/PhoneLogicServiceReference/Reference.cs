//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 5.0.61118.0
// 
namespace PhoneLogic.Inbound.PhoneLogicServiceReference {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="JobSummary", Namespace="http://schemas.datacontract.org/2004/07/PhoneLogic.DataContracts")]
    public partial class JobSummary : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int AbandonedField;
        
        private int CallbackField;
        
        private int InQueueField;
        
        private int InboundCallsField;
        
        private string JobNumberField;
        
        private int LeftMessageField;
        
        private int NoAgentsField;
        
        private int OutboundCallField;
        
        private int PlacedCallField;
        
        private string TollFreeNumberField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Abandoned {
            get {
                return this.AbandonedField;
            }
            set {
                if ((this.AbandonedField.Equals(value) != true)) {
                    this.AbandonedField = value;
                    this.RaisePropertyChanged("Abandoned");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Callback {
            get {
                return this.CallbackField;
            }
            set {
                if ((this.CallbackField.Equals(value) != true)) {
                    this.CallbackField = value;
                    this.RaisePropertyChanged("Callback");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int InQueue {
            get {
                return this.InQueueField;
            }
            set {
                if ((this.InQueueField.Equals(value) != true)) {
                    this.InQueueField = value;
                    this.RaisePropertyChanged("InQueue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int InboundCalls {
            get {
                return this.InboundCallsField;
            }
            set {
                if ((this.InboundCallsField.Equals(value) != true)) {
                    this.InboundCallsField = value;
                    this.RaisePropertyChanged("InboundCalls");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string JobNumber {
            get {
                return this.JobNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.JobNumberField, value) != true)) {
                    this.JobNumberField = value;
                    this.RaisePropertyChanged("JobNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int LeftMessage {
            get {
                return this.LeftMessageField;
            }
            set {
                if ((this.LeftMessageField.Equals(value) != true)) {
                    this.LeftMessageField = value;
                    this.RaisePropertyChanged("LeftMessage");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int NoAgents {
            get {
                return this.NoAgentsField;
            }
            set {
                if ((this.NoAgentsField.Equals(value) != true)) {
                    this.NoAgentsField = value;
                    this.RaisePropertyChanged("NoAgents");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int OutboundCall {
            get {
                return this.OutboundCallField;
            }
            set {
                if ((this.OutboundCallField.Equals(value) != true)) {
                    this.OutboundCallField = value;
                    this.RaisePropertyChanged("OutboundCall");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PlacedCall {
            get {
                return this.PlacedCallField;
            }
            set {
                if ((this.PlacedCallField.Equals(value) != true)) {
                    this.PlacedCallField = value;
                    this.RaisePropertyChanged("PlacedCall");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TollFreeNumber {
            get {
                return this.TollFreeNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.TollFreeNumberField, value) != true)) {
                    this.TollFreeNumberField = value;
                    this.RaisePropertyChanged("TollFreeNumber");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="QueueDetail", Namespace="http://schemas.datacontract.org/2004/07/PhoneLogic.DataContracts")]
    public partial class QueueDetail : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string CallerIdField;
        
        private string IdField;
        
        private string JobNumberField;
        
        private string TimeInField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CallerId {
            get {
                return this.CallerIdField;
            }
            set {
                if ((object.ReferenceEquals(this.CallerIdField, value) != true)) {
                    this.CallerIdField = value;
                    this.RaisePropertyChanged("CallerId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Id {
            get {
                return this.IdField;
            }
            set {
                if ((object.ReferenceEquals(this.IdField, value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string JobNumber {
            get {
                return this.JobNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.JobNumberField, value) != true)) {
                    this.JobNumberField = value;
                    this.RaisePropertyChanged("JobNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TimeIn {
            get {
                return this.TimeInField;
            }
            set {
                if ((object.ReferenceEquals(this.TimeInField, value) != true)) {
                    this.TimeInField = value;
                    this.RaisePropertyChanged("TimeIn");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="PhoneLogicServiceReference.IPhoneLogicService")]
    public interface IPhoneLogicService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPhoneLogicService/GetJobSummary", ReplyAction="http://tempuri.org/IPhoneLogicService/GetJobSummaryResponse")]
        System.IAsyncResult BeginGetJobSummary(System.AsyncCallback callback, object asyncState);
        
        PhoneLogic.Inbound.PhoneLogicServiceReference.JobSummary[] EndGetJobSummary(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPhoneLogicService/GetQueueDetail", ReplyAction="http://tempuri.org/IPhoneLogicService/GetQueueDetailResponse")]
        System.IAsyncResult BeginGetQueueDetail(string jobNumber, System.AsyncCallback callback, object asyncState);
        
        PhoneLogic.Inbound.PhoneLogicServiceReference.QueueDetail[] EndGetQueueDetail(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPhoneLogicService/GetMyQueuedCalls", ReplyAction="http://tempuri.org/IPhoneLogicService/GetMyQueuedCallsResponse")]
        System.IAsyncResult BeginGetMyQueuedCalls(string sipAddress, System.AsyncCallback callback, object asyncState);
        
        int EndGetMyQueuedCalls(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPhoneLogicService/GetRecruitersOnline", ReplyAction="http://tempuri.org/IPhoneLogicService/GetRecruitersOnlineResponse")]
        System.IAsyncResult BeginGetRecruitersOnline(System.AsyncCallback callback, object asyncState);
        
        string[] EndGetRecruitersOnline(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPhoneLogicService/GetRecruitersAvailable", ReplyAction="http://tempuri.org/IPhoneLogicService/GetRecruitersAvailableResponse")]
        System.IAsyncResult BeginGetRecruitersAvailable(System.AsyncCallback callback, object asyncState);
        
        string[] EndGetRecruitersAvailable(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPhoneLogicService/SilentMonitorCall", ReplyAction="http://tempuri.org/IPhoneLogicService/SilentMonitorCallResponse")]
        System.IAsyncResult BeginSilentMonitorCall(string id, string sipAddress, System.AsyncCallback callback, object asyncState);
        
        void EndSilentMonitorCall(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPhoneLogicService/BargeIntoCall", ReplyAction="http://tempuri.org/IPhoneLogicService/BargeIntoCallResponse")]
        System.IAsyncResult BeginBargeIntoCall(string id, string sipAddress, System.AsyncCallback callback, object asyncState);
        
        void EndBargeIntoCall(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPhoneLogicService/DispatchCallInQueue", ReplyAction="http://tempuri.org/IPhoneLogicService/DispatchCallInQueueResponse")]
        System.IAsyncResult BeginDispatchCallInQueue(string id, string sipAddress, System.AsyncCallback callback, object asyncState);
        
        void EndDispatchCallInQueue(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IPhoneLogicServiceChannel : PhoneLogic.Inbound.PhoneLogicServiceReference.IPhoneLogicService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetJobSummaryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetJobSummaryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public PhoneLogic.Inbound.PhoneLogicServiceReference.JobSummary[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((PhoneLogic.Inbound.PhoneLogicServiceReference.JobSummary[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetQueueDetailCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetQueueDetailCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public PhoneLogic.Inbound.PhoneLogicServiceReference.QueueDetail[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((PhoneLogic.Inbound.PhoneLogicServiceReference.QueueDetail[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetMyQueuedCallsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetMyQueuedCallsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetRecruitersOnlineCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetRecruitersOnlineCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetRecruitersAvailableCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetRecruitersAvailableCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PhoneLogicServiceClient : System.ServiceModel.ClientBase<PhoneLogic.Inbound.PhoneLogicServiceReference.IPhoneLogicService>, PhoneLogic.Inbound.PhoneLogicServiceReference.IPhoneLogicService {
        
        private BeginOperationDelegate onBeginGetJobSummaryDelegate;
        
        private EndOperationDelegate onEndGetJobSummaryDelegate;
        
        private System.Threading.SendOrPostCallback onGetJobSummaryCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetQueueDetailDelegate;
        
        private EndOperationDelegate onEndGetQueueDetailDelegate;
        
        private System.Threading.SendOrPostCallback onGetQueueDetailCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetMyQueuedCallsDelegate;
        
        private EndOperationDelegate onEndGetMyQueuedCallsDelegate;
        
        private System.Threading.SendOrPostCallback onGetMyQueuedCallsCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetRecruitersOnlineDelegate;
        
        private EndOperationDelegate onEndGetRecruitersOnlineDelegate;
        
        private System.Threading.SendOrPostCallback onGetRecruitersOnlineCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetRecruitersAvailableDelegate;
        
        private EndOperationDelegate onEndGetRecruitersAvailableDelegate;
        
        private System.Threading.SendOrPostCallback onGetRecruitersAvailableCompletedDelegate;
        
        private BeginOperationDelegate onBeginSilentMonitorCallDelegate;
        
        private EndOperationDelegate onEndSilentMonitorCallDelegate;
        
        private System.Threading.SendOrPostCallback onSilentMonitorCallCompletedDelegate;
        
        private BeginOperationDelegate onBeginBargeIntoCallDelegate;
        
        private EndOperationDelegate onEndBargeIntoCallDelegate;
        
        private System.Threading.SendOrPostCallback onBargeIntoCallCompletedDelegate;
        
        private BeginOperationDelegate onBeginDispatchCallInQueueDelegate;
        
        private EndOperationDelegate onEndDispatchCallInQueueDelegate;
        
        private System.Threading.SendOrPostCallback onDispatchCallInQueueCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public PhoneLogicServiceClient() {
        }
        
        public PhoneLogicServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public PhoneLogicServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PhoneLogicServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PhoneLogicServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<GetJobSummaryCompletedEventArgs> GetJobSummaryCompleted;
        
        public event System.EventHandler<GetQueueDetailCompletedEventArgs> GetQueueDetailCompleted;
        
        public event System.EventHandler<GetMyQueuedCallsCompletedEventArgs> GetMyQueuedCallsCompleted;
        
        public event System.EventHandler<GetRecruitersOnlineCompletedEventArgs> GetRecruitersOnlineCompleted;
        
        public event System.EventHandler<GetRecruitersAvailableCompletedEventArgs> GetRecruitersAvailableCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> SilentMonitorCallCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> BargeIntoCallCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> DispatchCallInQueueCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult PhoneLogic.Inbound.PhoneLogicServiceReference.IPhoneLogicService.BeginGetJobSummary(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetJobSummary(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        PhoneLogic.Inbound.PhoneLogicServiceReference.JobSummary[] PhoneLogic.Inbound.PhoneLogicServiceReference.IPhoneLogicService.EndGetJobSummary(System.IAsyncResult result) {
            return base.Channel.EndGetJobSummary(result);
        }
        
        private System.IAsyncResult OnBeginGetJobSummary(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((PhoneLogic.Inbound.PhoneLogicServiceReference.IPhoneLogicService)(this)).BeginGetJobSummary(callback, asyncState);
        }
        
        private object[] OnEndGetJobSummary(System.IAsyncResult result) {
            PhoneLogic.Inbound.PhoneLogicServiceReference.JobSummary[] retVal = ((PhoneLogic.Inbound.PhoneLogicServiceReference.IPhoneLogicService)(this)).EndGetJobSummary(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetJobSummaryCompleted(object state) {
            if ((this.GetJobSummaryCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetJobSummaryCompleted(this, new GetJobSummaryCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetJobSummaryAsync() {
            this.GetJobSummaryAsync(null);
        }
        
        public void GetJobSummaryAsync(object userState) {
            if ((this.onBeginGetJobSummaryDelegate == null)) {
                this.onBeginGetJobSummaryDelegate = new BeginOperationDelegate(this.OnBeginGetJobSummary);
            }
            if ((this.onEndGetJobSummaryDelegate == null)) {
                this.onEndGetJobSummaryDelegate = new EndOperationDelegate(this.OnEndGetJobSummary);
            }
            if ((this.onGetJobSummaryCompletedDelegate == null)) {
                this.onGetJobSummaryCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetJobSummaryCompleted);
            }
            base.InvokeAsync(this.onBeginGetJobSummaryDelegate, null, this.onEndGetJobSummaryDelegate, this.onGetJobSummaryCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult PhoneLogic.Inbound.PhoneLogicServiceReference.IPhoneLogicService.BeginGetQueueDetail(string jobNumber, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetQueueDetail(jobNumber, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        PhoneLogic.Inbound.PhoneLogicServiceReference.QueueDetail[] PhoneLogic.Inbound.PhoneLogicServiceReference.IPhoneLogicService.EndGetQueueDetail(System.IAsyncResult result) {
            return base.Channel.EndGetQueueDetail(result);
        }
        
        private System.IAsyncResult OnBeginGetQueueDetail(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string jobNumber = ((string)(inValues[0]));
            return ((PhoneLogic.Inbound.PhoneLogicServiceReference.IPhoneLogicService)(this)).BeginGetQueueDetail(jobNumber, callback, asyncState);
        }
        
        private object[] OnEndGetQueueDetail(System.IAsyncResult result) {
            PhoneLogic.Inbound.PhoneLogicServiceReference.QueueDetail[] retVal = ((PhoneLogic.Inbound.PhoneLogicServiceReference.IPhoneLogicService)(this)).EndGetQueueDetail(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetQueueDetailCompleted(object state) {
            if ((this.GetQueueDetailCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetQueueDetailCompleted(this, new GetQueueDetailCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetQueueDetailAsync(string jobNumber) {
            this.GetQueueDetailAsync(jobNumber, null);
        }
        
        public void GetQueueDetailAsync(string jobNumber, object userState) {
            if ((this.onBeginGetQueueDetailDelegate == null)) {
                this.onBeginGetQueueDetailDelegate = new BeginOperationDelegate(this.OnBeginGetQueueDetail);
            }
            if ((this.onEndGetQueueDetailDelegate == null)) {
                this.onEndGetQueueDetailDelegate = new EndOperationDelegate(this.OnEndGetQueueDetail);
            }
            if ((this.onGetQueueDetailCompletedDelegate == null)) {
                this.onGetQueueDetailCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetQueueDetailCompleted);
            }
            base.InvokeAsync(this.onBeginGetQueueDetailDelegate, new object[] {
                        jobNumber}, this.onEndGetQueueDetailDelegate, this.onGetQueueDetailCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult PhoneLogic.Inbound.PhoneLogicServiceReference.IPhoneLogicService.BeginGetMyQueuedCalls(string sipAddress, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetMyQueuedCalls(sipAddress, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        int PhoneLogic.Inbound.PhoneLogicServiceReference.IPhoneLogicService.EndGetMyQueuedCalls(System.IAsyncResult result) {
            return base.Channel.EndGetMyQueuedCalls(result);
        }
        
        private System.IAsyncResult OnBeginGetMyQueuedCalls(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string sipAddress = ((string)(inValues[0]));
            return ((PhoneLogic.Inbound.PhoneLogicServiceReference.IPhoneLogicService)(this)).BeginGetMyQueuedCalls(sipAddress, callback, asyncState);
        }
        
        private object[] OnEndGetMyQueuedCalls(System.IAsyncResult result) {
            int retVal = ((PhoneLogic.Inbound.PhoneLogicServiceReference.IPhoneLogicService)(this)).EndGetMyQueuedCalls(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetMyQueuedCallsCompleted(object state) {
            if ((this.GetMyQueuedCallsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetMyQueuedCallsCompleted(this, new GetMyQueuedCallsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetMyQueuedCallsAsync(string sipAddress) {
            this.GetMyQueuedCallsAsync(sipAddress, null);
        }
        
        public void GetMyQueuedCallsAsync(string sipAddress, object userState) {
            if ((this.onBeginGetMyQueuedCallsDelegate == null)) {
                this.onBeginGetMyQueuedCallsDelegate = new BeginOperationDelegate(this.OnBeginGetMyQueuedCalls);
            }
            if ((this.onEndGetMyQueuedCallsDelegate == null)) {
                this.onEndGetMyQueuedCallsDelegate = new EndOperationDelegate(this.OnEndGetMyQueuedCalls);
            }
            if ((this.onGetMyQueuedCallsCompletedDelegate == null)) {
                this.onGetMyQueuedCallsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetMyQueuedCallsCompleted);
            }
            base.InvokeAsync(this.onBeginGetMyQueuedCallsDelegate, new object[] {
                        sipAddress}, this.onEndGetMyQueuedCallsDelegate, this.onGetMyQueuedCallsCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult PhoneLogic.Inbound.PhoneLogicServiceReference.IPhoneLogicService.BeginGetRecruitersOnline(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetRecruitersOnline(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string[] PhoneLogic.Inbound.PhoneLogicServiceReference.IPhoneLogicService.EndGetRecruitersOnline(System.IAsyncResult result) {
            return base.Channel.EndGetRecruitersOnline(result);
        }
        
        private System.IAsyncResult OnBeginGetRecruitersOnline(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((PhoneLogic.Inbound.PhoneLogicServiceReference.IPhoneLogicService)(this)).BeginGetRecruitersOnline(callback, asyncState);
        }
        
        private object[] OnEndGetRecruitersOnline(System.IAsyncResult result) {
            string[] retVal = ((PhoneLogic.Inbound.PhoneLogicServiceReference.IPhoneLogicService)(this)).EndGetRecruitersOnline(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetRecruitersOnlineCompleted(object state) {
            if ((this.GetRecruitersOnlineCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetRecruitersOnlineCompleted(this, new GetRecruitersOnlineCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetRecruitersOnlineAsync() {
            this.GetRecruitersOnlineAsync(null);
        }
        
        public void GetRecruitersOnlineAsync(object userState) {
            if ((this.onBeginGetRecruitersOnlineDelegate == null)) {
                this.onBeginGetRecruitersOnlineDelegate = new BeginOperationDelegate(this.OnBeginGetRecruitersOnline);
            }
            if ((this.onEndGetRecruitersOnlineDelegate == null)) {
                this.onEndGetRecruitersOnlineDelegate = new EndOperationDelegate(this.OnEndGetRecruitersOnline);
            }
            if ((this.onGetRecruitersOnlineCompletedDelegate == null)) {
                this.onGetRecruitersOnlineCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetRecruitersOnlineCompleted);
            }
            base.InvokeAsync(this.onBeginGetRecruitersOnlineDelegate, null, this.onEndGetRecruitersOnlineDelegate, this.onGetRecruitersOnlineCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult PhoneLogic.Inbound.PhoneLogicServiceReference.IPhoneLogicService.BeginGetRecruitersAvailable(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetRecruitersAvailable(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string[] PhoneLogic.Inbound.PhoneLogicServiceReference.IPhoneLogicService.EndGetRecruitersAvailable(System.IAsyncResult result) {
            return base.Channel.EndGetRecruitersAvailable(result);
        }
        
        private System.IAsyncResult OnBeginGetRecruitersAvailable(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((PhoneLogic.Inbound.PhoneLogicServiceReference.IPhoneLogicService)(this)).BeginGetRecruitersAvailable(callback, asyncState);
        }
        
        private object[] OnEndGetRecruitersAvailable(System.IAsyncResult result) {
            string[] retVal = ((PhoneLogic.Inbound.PhoneLogicServiceReference.IPhoneLogicService)(this)).EndGetRecruitersAvailable(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetRecruitersAvailableCompleted(object state) {
            if ((this.GetRecruitersAvailableCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetRecruitersAvailableCompleted(this, new GetRecruitersAvailableCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetRecruitersAvailableAsync() {
            this.GetRecruitersAvailableAsync(null);
        }
        
        public void GetRecruitersAvailableAsync(object userState) {
            if ((this.onBeginGetRecruitersAvailableDelegate == null)) {
                this.onBeginGetRecruitersAvailableDelegate = new BeginOperationDelegate(this.OnBeginGetRecruitersAvailable);
            }
            if ((this.onEndGetRecruitersAvailableDelegate == null)) {
                this.onEndGetRecruitersAvailableDelegate = new EndOperationDelegate(this.OnEndGetRecruitersAvailable);
            }
            if ((this.onGetRecruitersAvailableCompletedDelegate == null)) {
                this.onGetRecruitersAvailableCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetRecruitersAvailableCompleted);
            }
            base.InvokeAsync(this.onBeginGetRecruitersAvailableDelegate, null, this.onEndGetRecruitersAvailableDelegate, this.onGetRecruitersAvailableCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult PhoneLogic.Inbound.PhoneLogicServiceReference.IPhoneLogicService.BeginSilentMonitorCall(string id, string sipAddress, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSilentMonitorCall(id, sipAddress, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void PhoneLogic.Inbound.PhoneLogicServiceReference.IPhoneLogicService.EndSilentMonitorCall(System.IAsyncResult result) {
            base.Channel.EndSilentMonitorCall(result);
        }
        
        private System.IAsyncResult OnBeginSilentMonitorCall(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string id = ((string)(inValues[0]));
            string sipAddress = ((string)(inValues[1]));
            return ((PhoneLogic.Inbound.PhoneLogicServiceReference.IPhoneLogicService)(this)).BeginSilentMonitorCall(id, sipAddress, callback, asyncState);
        }
        
        private object[] OnEndSilentMonitorCall(System.IAsyncResult result) {
            ((PhoneLogic.Inbound.PhoneLogicServiceReference.IPhoneLogicService)(this)).EndSilentMonitorCall(result);
            return null;
        }
        
        private void OnSilentMonitorCallCompleted(object state) {
            if ((this.SilentMonitorCallCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SilentMonitorCallCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SilentMonitorCallAsync(string id, string sipAddress) {
            this.SilentMonitorCallAsync(id, sipAddress, null);
        }
        
        public void SilentMonitorCallAsync(string id, string sipAddress, object userState) {
            if ((this.onBeginSilentMonitorCallDelegate == null)) {
                this.onBeginSilentMonitorCallDelegate = new BeginOperationDelegate(this.OnBeginSilentMonitorCall);
            }
            if ((this.onEndSilentMonitorCallDelegate == null)) {
                this.onEndSilentMonitorCallDelegate = new EndOperationDelegate(this.OnEndSilentMonitorCall);
            }
            if ((this.onSilentMonitorCallCompletedDelegate == null)) {
                this.onSilentMonitorCallCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSilentMonitorCallCompleted);
            }
            base.InvokeAsync(this.onBeginSilentMonitorCallDelegate, new object[] {
                        id,
                        sipAddress}, this.onEndSilentMonitorCallDelegate, this.onSilentMonitorCallCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult PhoneLogic.Inbound.PhoneLogicServiceReference.IPhoneLogicService.BeginBargeIntoCall(string id, string sipAddress, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginBargeIntoCall(id, sipAddress, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void PhoneLogic.Inbound.PhoneLogicServiceReference.IPhoneLogicService.EndBargeIntoCall(System.IAsyncResult result) {
            base.Channel.EndBargeIntoCall(result);
        }
        
        private System.IAsyncResult OnBeginBargeIntoCall(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string id = ((string)(inValues[0]));
            string sipAddress = ((string)(inValues[1]));
            return ((PhoneLogic.Inbound.PhoneLogicServiceReference.IPhoneLogicService)(this)).BeginBargeIntoCall(id, sipAddress, callback, asyncState);
        }
        
        private object[] OnEndBargeIntoCall(System.IAsyncResult result) {
            ((PhoneLogic.Inbound.PhoneLogicServiceReference.IPhoneLogicService)(this)).EndBargeIntoCall(result);
            return null;
        }
        
        private void OnBargeIntoCallCompleted(object state) {
            if ((this.BargeIntoCallCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.BargeIntoCallCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void BargeIntoCallAsync(string id, string sipAddress) {
            this.BargeIntoCallAsync(id, sipAddress, null);
        }
        
        public void BargeIntoCallAsync(string id, string sipAddress, object userState) {
            if ((this.onBeginBargeIntoCallDelegate == null)) {
                this.onBeginBargeIntoCallDelegate = new BeginOperationDelegate(this.OnBeginBargeIntoCall);
            }
            if ((this.onEndBargeIntoCallDelegate == null)) {
                this.onEndBargeIntoCallDelegate = new EndOperationDelegate(this.OnEndBargeIntoCall);
            }
            if ((this.onBargeIntoCallCompletedDelegate == null)) {
                this.onBargeIntoCallCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnBargeIntoCallCompleted);
            }
            base.InvokeAsync(this.onBeginBargeIntoCallDelegate, new object[] {
                        id,
                        sipAddress}, this.onEndBargeIntoCallDelegate, this.onBargeIntoCallCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult PhoneLogic.Inbound.PhoneLogicServiceReference.IPhoneLogicService.BeginDispatchCallInQueue(string id, string sipAddress, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDispatchCallInQueue(id, sipAddress, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void PhoneLogic.Inbound.PhoneLogicServiceReference.IPhoneLogicService.EndDispatchCallInQueue(System.IAsyncResult result) {
            base.Channel.EndDispatchCallInQueue(result);
        }
        
        private System.IAsyncResult OnBeginDispatchCallInQueue(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string id = ((string)(inValues[0]));
            string sipAddress = ((string)(inValues[1]));
            return ((PhoneLogic.Inbound.PhoneLogicServiceReference.IPhoneLogicService)(this)).BeginDispatchCallInQueue(id, sipAddress, callback, asyncState);
        }
        
        private object[] OnEndDispatchCallInQueue(System.IAsyncResult result) {
            ((PhoneLogic.Inbound.PhoneLogicServiceReference.IPhoneLogicService)(this)).EndDispatchCallInQueue(result);
            return null;
        }
        
        private void OnDispatchCallInQueueCompleted(object state) {
            if ((this.DispatchCallInQueueCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DispatchCallInQueueCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DispatchCallInQueueAsync(string id, string sipAddress) {
            this.DispatchCallInQueueAsync(id, sipAddress, null);
        }
        
        public void DispatchCallInQueueAsync(string id, string sipAddress, object userState) {
            if ((this.onBeginDispatchCallInQueueDelegate == null)) {
                this.onBeginDispatchCallInQueueDelegate = new BeginOperationDelegate(this.OnBeginDispatchCallInQueue);
            }
            if ((this.onEndDispatchCallInQueueDelegate == null)) {
                this.onEndDispatchCallInQueueDelegate = new EndOperationDelegate(this.OnEndDispatchCallInQueue);
            }
            if ((this.onDispatchCallInQueueCompletedDelegate == null)) {
                this.onDispatchCallInQueueCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDispatchCallInQueueCompleted);
            }
            base.InvokeAsync(this.onBeginDispatchCallInQueueDelegate, new object[] {
                        id,
                        sipAddress}, this.onEndDispatchCallInQueueDelegate, this.onDispatchCallInQueueCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override PhoneLogic.Inbound.PhoneLogicServiceReference.IPhoneLogicService CreateChannel() {
            return new PhoneLogicServiceClientChannel(this);
        }
        
        private class PhoneLogicServiceClientChannel : ChannelBase<PhoneLogic.Inbound.PhoneLogicServiceReference.IPhoneLogicService>, PhoneLogic.Inbound.PhoneLogicServiceReference.IPhoneLogicService {
            
            public PhoneLogicServiceClientChannel(System.ServiceModel.ClientBase<PhoneLogic.Inbound.PhoneLogicServiceReference.IPhoneLogicService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginGetJobSummary(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetJobSummary", _args, callback, asyncState);
                return _result;
            }
            
            public PhoneLogic.Inbound.PhoneLogicServiceReference.JobSummary[] EndGetJobSummary(System.IAsyncResult result) {
                object[] _args = new object[0];
                PhoneLogic.Inbound.PhoneLogicServiceReference.JobSummary[] _result = ((PhoneLogic.Inbound.PhoneLogicServiceReference.JobSummary[])(base.EndInvoke("GetJobSummary", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetQueueDetail(string jobNumber, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = jobNumber;
                System.IAsyncResult _result = base.BeginInvoke("GetQueueDetail", _args, callback, asyncState);
                return _result;
            }
            
            public PhoneLogic.Inbound.PhoneLogicServiceReference.QueueDetail[] EndGetQueueDetail(System.IAsyncResult result) {
                object[] _args = new object[0];
                PhoneLogic.Inbound.PhoneLogicServiceReference.QueueDetail[] _result = ((PhoneLogic.Inbound.PhoneLogicServiceReference.QueueDetail[])(base.EndInvoke("GetQueueDetail", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetMyQueuedCalls(string sipAddress, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = sipAddress;
                System.IAsyncResult _result = base.BeginInvoke("GetMyQueuedCalls", _args, callback, asyncState);
                return _result;
            }
            
            public int EndGetMyQueuedCalls(System.IAsyncResult result) {
                object[] _args = new object[0];
                int _result = ((int)(base.EndInvoke("GetMyQueuedCalls", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetRecruitersOnline(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetRecruitersOnline", _args, callback, asyncState);
                return _result;
            }
            
            public string[] EndGetRecruitersOnline(System.IAsyncResult result) {
                object[] _args = new object[0];
                string[] _result = ((string[])(base.EndInvoke("GetRecruitersOnline", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetRecruitersAvailable(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetRecruitersAvailable", _args, callback, asyncState);
                return _result;
            }
            
            public string[] EndGetRecruitersAvailable(System.IAsyncResult result) {
                object[] _args = new object[0];
                string[] _result = ((string[])(base.EndInvoke("GetRecruitersAvailable", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginSilentMonitorCall(string id, string sipAddress, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = id;
                _args[1] = sipAddress;
                System.IAsyncResult _result = base.BeginInvoke("SilentMonitorCall", _args, callback, asyncState);
                return _result;
            }
            
            public void EndSilentMonitorCall(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("SilentMonitorCall", _args, result);
            }
            
            public System.IAsyncResult BeginBargeIntoCall(string id, string sipAddress, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = id;
                _args[1] = sipAddress;
                System.IAsyncResult _result = base.BeginInvoke("BargeIntoCall", _args, callback, asyncState);
                return _result;
            }
            
            public void EndBargeIntoCall(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("BargeIntoCall", _args, result);
            }
            
            public System.IAsyncResult BeginDispatchCallInQueue(string id, string sipAddress, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = id;
                _args[1] = sipAddress;
                System.IAsyncResult _result = base.BeginInvoke("DispatchCallInQueue", _args, callback, asyncState);
                return _result;
            }
            
            public void EndDispatchCallInQueue(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("DispatchCallInQueue", _args, result);
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="PhoneLogicServiceReference.IPolicyRetriever")]
    public interface IPolicyRetriever {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPolicyRetriever/GetSilverlightPolicy", ReplyAction="http://tempuri.org/IPolicyRetriever/GetSilverlightPolicyResponse")]
        System.IAsyncResult BeginGetSilverlightPolicy(System.AsyncCallback callback, object asyncState);
        
        byte[] EndGetSilverlightPolicy(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPolicyRetriever/GetFlashPolicy", ReplyAction="http://tempuri.org/IPolicyRetriever/GetFlashPolicyResponse")]
        System.IAsyncResult BeginGetFlashPolicy(System.AsyncCallback callback, object asyncState);
        
        byte[] EndGetFlashPolicy(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IPolicyRetrieverChannel : PhoneLogic.Inbound.PhoneLogicServiceReference.IPolicyRetriever, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetSilverlightPolicyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetSilverlightPolicyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public byte[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetFlashPolicyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetFlashPolicyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public byte[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PolicyRetrieverClient : System.ServiceModel.ClientBase<PhoneLogic.Inbound.PhoneLogicServiceReference.IPolicyRetriever>, PhoneLogic.Inbound.PhoneLogicServiceReference.IPolicyRetriever {
        
        private BeginOperationDelegate onBeginGetSilverlightPolicyDelegate;
        
        private EndOperationDelegate onEndGetSilverlightPolicyDelegate;
        
        private System.Threading.SendOrPostCallback onGetSilverlightPolicyCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetFlashPolicyDelegate;
        
        private EndOperationDelegate onEndGetFlashPolicyDelegate;
        
        private System.Threading.SendOrPostCallback onGetFlashPolicyCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public PolicyRetrieverClient() {
        }
        
        public PolicyRetrieverClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public PolicyRetrieverClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PolicyRetrieverClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PolicyRetrieverClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<GetSilverlightPolicyCompletedEventArgs> GetSilverlightPolicyCompleted;
        
        public event System.EventHandler<GetFlashPolicyCompletedEventArgs> GetFlashPolicyCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult PhoneLogic.Inbound.PhoneLogicServiceReference.IPolicyRetriever.BeginGetSilverlightPolicy(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetSilverlightPolicy(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        byte[] PhoneLogic.Inbound.PhoneLogicServiceReference.IPolicyRetriever.EndGetSilverlightPolicy(System.IAsyncResult result) {
            return base.Channel.EndGetSilverlightPolicy(result);
        }
        
        private System.IAsyncResult OnBeginGetSilverlightPolicy(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((PhoneLogic.Inbound.PhoneLogicServiceReference.IPolicyRetriever)(this)).BeginGetSilverlightPolicy(callback, asyncState);
        }
        
        private object[] OnEndGetSilverlightPolicy(System.IAsyncResult result) {
            byte[] retVal = ((PhoneLogic.Inbound.PhoneLogicServiceReference.IPolicyRetriever)(this)).EndGetSilverlightPolicy(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetSilverlightPolicyCompleted(object state) {
            if ((this.GetSilverlightPolicyCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetSilverlightPolicyCompleted(this, new GetSilverlightPolicyCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetSilverlightPolicyAsync() {
            this.GetSilverlightPolicyAsync(null);
        }
        
        public void GetSilverlightPolicyAsync(object userState) {
            if ((this.onBeginGetSilverlightPolicyDelegate == null)) {
                this.onBeginGetSilverlightPolicyDelegate = new BeginOperationDelegate(this.OnBeginGetSilverlightPolicy);
            }
            if ((this.onEndGetSilverlightPolicyDelegate == null)) {
                this.onEndGetSilverlightPolicyDelegate = new EndOperationDelegate(this.OnEndGetSilverlightPolicy);
            }
            if ((this.onGetSilverlightPolicyCompletedDelegate == null)) {
                this.onGetSilverlightPolicyCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetSilverlightPolicyCompleted);
            }
            base.InvokeAsync(this.onBeginGetSilverlightPolicyDelegate, null, this.onEndGetSilverlightPolicyDelegate, this.onGetSilverlightPolicyCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult PhoneLogic.Inbound.PhoneLogicServiceReference.IPolicyRetriever.BeginGetFlashPolicy(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetFlashPolicy(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        byte[] PhoneLogic.Inbound.PhoneLogicServiceReference.IPolicyRetriever.EndGetFlashPolicy(System.IAsyncResult result) {
            return base.Channel.EndGetFlashPolicy(result);
        }
        
        private System.IAsyncResult OnBeginGetFlashPolicy(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((PhoneLogic.Inbound.PhoneLogicServiceReference.IPolicyRetriever)(this)).BeginGetFlashPolicy(callback, asyncState);
        }
        
        private object[] OnEndGetFlashPolicy(System.IAsyncResult result) {
            byte[] retVal = ((PhoneLogic.Inbound.PhoneLogicServiceReference.IPolicyRetriever)(this)).EndGetFlashPolicy(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetFlashPolicyCompleted(object state) {
            if ((this.GetFlashPolicyCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetFlashPolicyCompleted(this, new GetFlashPolicyCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetFlashPolicyAsync() {
            this.GetFlashPolicyAsync(null);
        }
        
        public void GetFlashPolicyAsync(object userState) {
            if ((this.onBeginGetFlashPolicyDelegate == null)) {
                this.onBeginGetFlashPolicyDelegate = new BeginOperationDelegate(this.OnBeginGetFlashPolicy);
            }
            if ((this.onEndGetFlashPolicyDelegate == null)) {
                this.onEndGetFlashPolicyDelegate = new EndOperationDelegate(this.OnEndGetFlashPolicy);
            }
            if ((this.onGetFlashPolicyCompletedDelegate == null)) {
                this.onGetFlashPolicyCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetFlashPolicyCompleted);
            }
            base.InvokeAsync(this.onBeginGetFlashPolicyDelegate, null, this.onEndGetFlashPolicyDelegate, this.onGetFlashPolicyCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override PhoneLogic.Inbound.PhoneLogicServiceReference.IPolicyRetriever CreateChannel() {
            return new PolicyRetrieverClientChannel(this);
        }
        
        private class PolicyRetrieverClientChannel : ChannelBase<PhoneLogic.Inbound.PhoneLogicServiceReference.IPolicyRetriever>, PhoneLogic.Inbound.PhoneLogicServiceReference.IPolicyRetriever {
            
            public PolicyRetrieverClientChannel(System.ServiceModel.ClientBase<PhoneLogic.Inbound.PhoneLogicServiceReference.IPolicyRetriever> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginGetSilverlightPolicy(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetSilverlightPolicy", _args, callback, asyncState);
                return _result;
            }
            
            public byte[] EndGetSilverlightPolicy(System.IAsyncResult result) {
                object[] _args = new object[0];
                byte[] _result = ((byte[])(base.EndInvoke("GetSilverlightPolicy", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetFlashPolicy(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetFlashPolicy", _args, callback, asyncState);
                return _result;
            }
            
            public byte[] EndGetFlashPolicy(System.IAsyncResult result) {
                object[] _args = new object[0];
                byte[] _result = ((byte[])(base.EndInvoke("GetFlashPolicy", _args, result)));
                return _result;
            }
        }
    }
}
