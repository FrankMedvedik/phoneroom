using System.Globalization;
using System.Text.RegularExpressions;
using System.Windows;
using PhoneLogic.Core;
using PhoneLogic.Core.MVVM_Base_Types;
using PhoneLogic.Core.Services;
using PhoneLogic.Model;
using System.Collections.ObjectModel;
using System.Net;
using System;
using Newtonsoft.Json;
using Microsoft.Lync.Model;

namespace PhoneLogic.Inbound
{
    public class MainViewModel : CollectionViewModelBase
    {

        public MainViewModel()
        {
            
        }

        private PhoneLogicContext _phoneLogicContext = new PhoneLogicContext()
        {
            callerId = "",
            callbackId = -1,
            conversationId = "",
            dialedNumber = "",
            jobNumber = "",
            timeReceived = null
        };
        /*
         private async void SaveCallback(string Status)
        {
            // only set status and status dates
            var uriTemplate = ApiWebSite.urlRoot + "myCallbacks/{0}";
            var cb = new CallbackDto()
            {
                callbackID = PhoneLogicContext.callbackId,
                SIP = LyncClient.GetClient().Self.Contact.Uri,
                status = Status,
                EventDesc = SelectedCallEvent
            };
             await CallbackSvc.Save(cb);
        } */

        public PhoneLogicContext PhoneLogicContext
        {
            get { return _phoneLogicContext; }
            set
            {
                _phoneLogicContext = value;
                this.NotifyPropertyChanged();
            }
        }

        private Boolean _isCWE;
        public Boolean IsCWE
        {
            get { return _isCWE; }
            set
            {
                _isCWE = value;
                NotifyPropertyChanged();
            }
        }

        public Boolean IsCallback
        {
            get { return (PhoneLogicContext.callbackId > 1) ? true:false; }
        }

        public async void LookupPhone()
        {
            var pn = Regex.Replace(PhoneLogicContext.callerId, "[^0-9.]", "");
            if (String.IsNullOrEmpty(pn)) return;
            LoadPeople(pn);   
        }

        private ObservableCollection<person> _people = new ObservableCollection<person>();

        public ObservableCollection<person> People
        {
            get { return _people; }
            set
            {
                _people = value;
                this.NotifyPropertyChanged();
            }
        }

        private person _selectedPerson;

        public person SelectedPerson
        {
            get { return _selectedPerson; }
            set
            {
                _selectedPerson = value;
                this.NotifyPropertyChanged();
            }
        }

        private string _selectedCallEvent;

        public string SelectedCallEvent
        {
            get { return _selectedCallEvent; }
            set
            {
                _selectedCallEvent = value;
                this.NotifyPropertyChanged();
            }
        }

        public async void GetPhoneLogicTask()
        {
            PhoneLogicTask  = await PhoneLogicTaskSvc.GetTask(PhoneLogicContext.jobNumber, PhoneLogicContext.TaskID);
            //MessageBox.Show(r.jobFormatted + r.taskName + r.taskDscr) ;
        }

        private PhoneLogicTask _phoneLogicTask;
        public PhoneLogicTask PhoneLogicTask
        {
            get { return _phoneLogicTask; }
            set
            {
                _phoneLogicTask = value;
                NotifyPropertyChanged();
            }
        }

        protected override void RefreshAll(object sender, EventArgs e)
        {
            throw new NotImplementedException();
        }

        public async void LoadPeople(string phoneNum)
        {
            try
            {
                var url = ApiWebSite.urlRoot + "People?phoneNumber={" + phoneNum + "}";
                var uri = new Uri(url, UriKind.Absolute);
                var client = new WebClient();
                var data = await client.DownloadStringTaskAsync(new Uri(url, UriKind.Absolute));
                var d = JsonConvert.DeserializeObject<System.Collections.Generic.List<person>>(data);
                if (d.Count > 0)
                {
                    People.Clear();
                    ShowGridData = true;
                    foreach (var p in d)
                        People.Add(p);
                }
                else
                    ShowGridData = false;
                LoadedOk = true;
            }
            catch (Exception e)
            {
                LoadFailed(e);
            }
        }
    }
}
