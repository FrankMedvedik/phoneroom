//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Phonelogic.Alert.ProdServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="JobSummary", Namespace="http://schemas.datacontract.org/2004/07/PhoneLogic.DataContracts")]
    [System.SerializableAttribute()]
    public partial class JobSummary : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int AbandonedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CallbackField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int InQueueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int InboundCallsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string JobNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int LeftMessageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int NoAgentsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int OutboundCallField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PlacedCallField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TollFreeNumberField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Abandoned {
            get {
                return this.AbandonedField;
            }
            set {
                if ((this.AbandonedField.Equals(value) != true)) {
                    this.AbandonedField = value;
                    this.RaisePropertyChanged("Abandoned");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Callback {
            get {
                return this.CallbackField;
            }
            set {
                if ((this.CallbackField.Equals(value) != true)) {
                    this.CallbackField = value;
                    this.RaisePropertyChanged("Callback");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int InQueue {
            get {
                return this.InQueueField;
            }
            set {
                if ((this.InQueueField.Equals(value) != true)) {
                    this.InQueueField = value;
                    this.RaisePropertyChanged("InQueue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int InboundCalls {
            get {
                return this.InboundCallsField;
            }
            set {
                if ((this.InboundCallsField.Equals(value) != true)) {
                    this.InboundCallsField = value;
                    this.RaisePropertyChanged("InboundCalls");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string JobNumber {
            get {
                return this.JobNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.JobNumberField, value) != true)) {
                    this.JobNumberField = value;
                    this.RaisePropertyChanged("JobNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int LeftMessage {
            get {
                return this.LeftMessageField;
            }
            set {
                if ((this.LeftMessageField.Equals(value) != true)) {
                    this.LeftMessageField = value;
                    this.RaisePropertyChanged("LeftMessage");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int NoAgents {
            get {
                return this.NoAgentsField;
            }
            set {
                if ((this.NoAgentsField.Equals(value) != true)) {
                    this.NoAgentsField = value;
                    this.RaisePropertyChanged("NoAgents");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int OutboundCall {
            get {
                return this.OutboundCallField;
            }
            set {
                if ((this.OutboundCallField.Equals(value) != true)) {
                    this.OutboundCallField = value;
                    this.RaisePropertyChanged("OutboundCall");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PlacedCall {
            get {
                return this.PlacedCallField;
            }
            set {
                if ((this.PlacedCallField.Equals(value) != true)) {
                    this.PlacedCallField = value;
                    this.RaisePropertyChanged("PlacedCall");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TollFreeNumber {
            get {
                return this.TollFreeNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.TollFreeNumberField, value) != true)) {
                    this.TollFreeNumberField = value;
                    this.RaisePropertyChanged("TollFreeNumber");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="QueueDetail", Namespace="http://schemas.datacontract.org/2004/07/PhoneLogic.DataContracts")]
    [System.SerializableAttribute()]
    public partial class QueueDetail : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CallerIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string JobNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TimeInField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CallerId {
            get {
                return this.CallerIdField;
            }
            set {
                if ((object.ReferenceEquals(this.CallerIdField, value) != true)) {
                    this.CallerIdField = value;
                    this.RaisePropertyChanged("CallerId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Id {
            get {
                return this.IdField;
            }
            set {
                if ((object.ReferenceEquals(this.IdField, value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string JobNumber {
            get {
                return this.JobNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.JobNumberField, value) != true)) {
                    this.JobNumberField = value;
                    this.RaisePropertyChanged("JobNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TimeIn {
            get {
                return this.TimeInField;
            }
            set {
                if ((object.ReferenceEquals(this.TimeInField, value) != true)) {
                    this.TimeInField = value;
                    this.RaisePropertyChanged("TimeIn");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="QueueSummary", Namespace="http://schemas.datacontract.org/2004/07/PhoneLogic.DataContracts")]
    [System.SerializableAttribute()]
    public partial class QueueSummary : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int InQueueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string JobNumberField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int InQueue {
            get {
                return this.InQueueField;
            }
            set {
                if ((this.InQueueField.Equals(value) != true)) {
                    this.InQueueField = value;
                    this.RaisePropertyChanged("InQueue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string JobNumber {
            get {
                return this.JobNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.JobNumberField, value) != true)) {
                    this.JobNumberField = value;
                    this.RaisePropertyChanged("JobNumber");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ActiveCall", Namespace="http://schemas.datacontract.org/2004/07/PhoneLogic.DataContracts")]
    [System.SerializableAttribute()]
    public partial class ActiveCall : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CallerIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ConferenceUriField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string JobNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RecruiterUriField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TimeInField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CallerId {
            get {
                return this.CallerIdField;
            }
            set {
                if ((object.ReferenceEquals(this.CallerIdField, value) != true)) {
                    this.CallerIdField = value;
                    this.RaisePropertyChanged("CallerId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ConferenceUri {
            get {
                return this.ConferenceUriField;
            }
            set {
                if ((object.ReferenceEquals(this.ConferenceUriField, value) != true)) {
                    this.ConferenceUriField = value;
                    this.RaisePropertyChanged("ConferenceUri");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Id {
            get {
                return this.IdField;
            }
            set {
                if ((object.ReferenceEquals(this.IdField, value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string JobNumber {
            get {
                return this.JobNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.JobNumberField, value) != true)) {
                    this.JobNumberField = value;
                    this.RaisePropertyChanged("JobNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RecruiterUri {
            get {
                return this.RecruiterUriField;
            }
            set {
                if ((object.ReferenceEquals(this.RecruiterUriField, value) != true)) {
                    this.RecruiterUriField = value;
                    this.RaisePropertyChanged("RecruiterUri");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TimeIn {
            get {
                return this.TimeInField;
            }
            set {
                if ((object.ReferenceEquals(this.TimeInField, value) != true)) {
                    this.TimeInField = value;
                    this.RaisePropertyChanged("TimeIn");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://reckner.phonelogic.windowsservice", ConfigurationName="ProdServiceReference.IPhoneLogicService")]
    public interface IPhoneLogicService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://reckner.phonelogic.windowsservice/IPhoneLogicService/GetJobSummary", ReplyAction="http://reckner.phonelogic.windowsservice/IPhoneLogicService/GetJobSummaryResponse" +
            "")]
        Phonelogic.Alert.ProdServiceReference.JobSummary[] GetJobSummary();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://reckner.phonelogic.windowsservice/IPhoneLogicService/GetJobSummary", ReplyAction="http://reckner.phonelogic.windowsservice/IPhoneLogicService/GetJobSummaryResponse" +
            "")]
        System.Threading.Tasks.Task<Phonelogic.Alert.ProdServiceReference.JobSummary[]> GetJobSummaryAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://reckner.phonelogic.windowsservice/IPhoneLogicService/GetQueueDetail", ReplyAction="http://reckner.phonelogic.windowsservice/IPhoneLogicService/GetQueueDetailRespons" +
            "e")]
        Phonelogic.Alert.ProdServiceReference.QueueDetail[] GetQueueDetail(string jobNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://reckner.phonelogic.windowsservice/IPhoneLogicService/GetQueueDetail", ReplyAction="http://reckner.phonelogic.windowsservice/IPhoneLogicService/GetQueueDetailRespons" +
            "e")]
        System.Threading.Tasks.Task<Phonelogic.Alert.ProdServiceReference.QueueDetail[]> GetQueueDetailAsync(string jobNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://reckner.phonelogic.windowsservice/IPhoneLogicService/GetAllCallsInQueue", ReplyAction="http://reckner.phonelogic.windowsservice/IPhoneLogicService/GetAllCallsInQueueRes" +
            "ponse")]
        Phonelogic.Alert.ProdServiceReference.QueueDetail[] GetAllCallsInQueue();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://reckner.phonelogic.windowsservice/IPhoneLogicService/GetAllCallsInQueue", ReplyAction="http://reckner.phonelogic.windowsservice/IPhoneLogicService/GetAllCallsInQueueRes" +
            "ponse")]
        System.Threading.Tasks.Task<Phonelogic.Alert.ProdServiceReference.QueueDetail[]> GetAllCallsInQueueAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://reckner.phonelogic.windowsservice/IPhoneLogicService/GetMyQueuedCalls", ReplyAction="http://reckner.phonelogic.windowsservice/IPhoneLogicService/GetMyQueuedCallsRespo" +
            "nse")]
        int GetMyQueuedCalls(string sipAddress);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://reckner.phonelogic.windowsservice/IPhoneLogicService/GetMyQueuedCalls", ReplyAction="http://reckner.phonelogic.windowsservice/IPhoneLogicService/GetMyQueuedCallsRespo" +
            "nse")]
        System.Threading.Tasks.Task<int> GetMyQueuedCallsAsync(string sipAddress);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://reckner.phonelogic.windowsservice/IPhoneLogicService/GetMyQueueSummary", ReplyAction="http://reckner.phonelogic.windowsservice/IPhoneLogicService/GetMyQueueSummaryResp" +
            "onse")]
        Phonelogic.Alert.ProdServiceReference.QueueSummary[] GetMyQueueSummary(string sipAddress);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://reckner.phonelogic.windowsservice/IPhoneLogicService/GetMyQueueSummary", ReplyAction="http://reckner.phonelogic.windowsservice/IPhoneLogicService/GetMyQueueSummaryResp" +
            "onse")]
        System.Threading.Tasks.Task<Phonelogic.Alert.ProdServiceReference.QueueSummary[]> GetMyQueueSummaryAsync(string sipAddress);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://reckner.phonelogic.windowsservice/IPhoneLogicService/GetMyQueueDetail", ReplyAction="http://reckner.phonelogic.windowsservice/IPhoneLogicService/GetMyQueueDetailRespo" +
            "nse")]
        Phonelogic.Alert.ProdServiceReference.QueueDetail[] GetMyQueueDetail(string sipAddress);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://reckner.phonelogic.windowsservice/IPhoneLogicService/GetMyQueueDetail", ReplyAction="http://reckner.phonelogic.windowsservice/IPhoneLogicService/GetMyQueueDetailRespo" +
            "nse")]
        System.Threading.Tasks.Task<Phonelogic.Alert.ProdServiceReference.QueueDetail[]> GetMyQueueDetailAsync(string sipAddress);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://reckner.phonelogic.windowsservice/IPhoneLogicService/GetRecruitersOnline", ReplyAction="http://reckner.phonelogic.windowsservice/IPhoneLogicService/GetRecruitersOnlineRe" +
            "sponse")]
        string[] GetRecruitersOnline();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://reckner.phonelogic.windowsservice/IPhoneLogicService/GetRecruitersOnline", ReplyAction="http://reckner.phonelogic.windowsservice/IPhoneLogicService/GetRecruitersOnlineRe" +
            "sponse")]
        System.Threading.Tasks.Task<string[]> GetRecruitersOnlineAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://reckner.phonelogic.windowsservice/IPhoneLogicService/GetRecruitersAvailabl" +
            "e", ReplyAction="http://reckner.phonelogic.windowsservice/IPhoneLogicService/GetRecruitersAvailabl" +
            "eResponse")]
        string[] GetRecruitersAvailable();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://reckner.phonelogic.windowsservice/IPhoneLogicService/GetRecruitersAvailabl" +
            "e", ReplyAction="http://reckner.phonelogic.windowsservice/IPhoneLogicService/GetRecruitersAvailabl" +
            "eResponse")]
        System.Threading.Tasks.Task<string[]> GetRecruitersAvailableAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://reckner.phonelogic.windowsservice/IPhoneLogicService/GetActiveCalls", ReplyAction="http://reckner.phonelogic.windowsservice/IPhoneLogicService/GetActiveCallsRespons" +
            "e")]
        Phonelogic.Alert.ProdServiceReference.ActiveCall[] GetActiveCalls();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://reckner.phonelogic.windowsservice/IPhoneLogicService/GetActiveCalls", ReplyAction="http://reckner.phonelogic.windowsservice/IPhoneLogicService/GetActiveCallsRespons" +
            "e")]
        System.Threading.Tasks.Task<Phonelogic.Alert.ProdServiceReference.ActiveCall[]> GetActiveCallsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://reckner.phonelogic.windowsservice/IPhoneLogicService/ForceReady", ReplyAction="http://reckner.phonelogic.windowsservice/IPhoneLogicService/ForceReadyResponse")]
        void ForceReady(string recruiterUri);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://reckner.phonelogic.windowsservice/IPhoneLogicService/ForceReady", ReplyAction="http://reckner.phonelogic.windowsservice/IPhoneLogicService/ForceReadyResponse")]
        System.Threading.Tasks.Task ForceReadyAsync(string recruiterUri);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://reckner.phonelogic.windowsservice/IPhoneLogicService/PullFromQueue", ReplyAction="http://reckner.phonelogic.windowsservice/IPhoneLogicService/PullFromQueueResponse" +
            "")]
        void PullFromQueue(string id, string recruiterUri);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://reckner.phonelogic.windowsservice/IPhoneLogicService/PullFromQueue", ReplyAction="http://reckner.phonelogic.windowsservice/IPhoneLogicService/PullFromQueueResponse" +
            "")]
        System.Threading.Tasks.Task PullFromQueueAsync(string id, string recruiterUri);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://reckner.phonelogic.windowsservice/IPhoneLogicService/RecruiterDialOut", ReplyAction="http://reckner.phonelogic.windowsservice/IPhoneLogicService/RecruiterDialOutRespo" +
            "nse")]
        void RecruiterDialOut(string recruiterUri, string jobNumber, string numberToDial, int callbackId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://reckner.phonelogic.windowsservice/IPhoneLogicService/RecruiterDialOut", ReplyAction="http://reckner.phonelogic.windowsservice/IPhoneLogicService/RecruiterDialOutRespo" +
            "nse")]
        System.Threading.Tasks.Task RecruiterDialOutAsync(string recruiterUri, string jobNumber, string numberToDial, int callbackId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://reckner.phonelogic.windowsservice/IPhoneLogicService/TransferCall", ReplyAction="http://reckner.phonelogic.windowsservice/IPhoneLogicService/TransferCallResponse")]
        void TransferCall(string id, string recruiterUri);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://reckner.phonelogic.windowsservice/IPhoneLogicService/TransferCall", ReplyAction="http://reckner.phonelogic.windowsservice/IPhoneLogicService/TransferCallResponse")]
        System.Threading.Tasks.Task TransferCallAsync(string id, string recruiterUri);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://reckner.phonelogic.windowsservice/IPhoneLogicService/SilentMonitorCall", ReplyAction="http://reckner.phonelogic.windowsservice/IPhoneLogicService/SilentMonitorCallResp" +
            "onse")]
        void SilentMonitorCall(string id, string sipAddress);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://reckner.phonelogic.windowsservice/IPhoneLogicService/SilentMonitorCall", ReplyAction="http://reckner.phonelogic.windowsservice/IPhoneLogicService/SilentMonitorCallResp" +
            "onse")]
        System.Threading.Tasks.Task SilentMonitorCallAsync(string id, string sipAddress);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://reckner.phonelogic.windowsservice/IPhoneLogicService/BargeIntoCall", ReplyAction="http://reckner.phonelogic.windowsservice/IPhoneLogicService/BargeIntoCallResponse" +
            "")]
        void BargeIntoCall(string id, string sipAddress);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://reckner.phonelogic.windowsservice/IPhoneLogicService/BargeIntoCall", ReplyAction="http://reckner.phonelogic.windowsservice/IPhoneLogicService/BargeIntoCallResponse" +
            "")]
        System.Threading.Tasks.Task BargeIntoCallAsync(string id, string sipAddress);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://reckner.phonelogic.windowsservice/IPhoneLogicService/DispatchCallInQueue", ReplyAction="http://reckner.phonelogic.windowsservice/IPhoneLogicService/DispatchCallInQueueRe" +
            "sponse")]
        void DispatchCallInQueue(string id, string sipAddress);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://reckner.phonelogic.windowsservice/IPhoneLogicService/DispatchCallInQueue", ReplyAction="http://reckner.phonelogic.windowsservice/IPhoneLogicService/DispatchCallInQueueRe" +
            "sponse")]
        System.Threading.Tasks.Task DispatchCallInQueueAsync(string id, string sipAddress);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IPhoneLogicServiceChannel : Phonelogic.Alert.ProdServiceReference.IPhoneLogicService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PhoneLogicServiceClient : System.ServiceModel.ClientBase<Phonelogic.Alert.ProdServiceReference.IPhoneLogicService>, Phonelogic.Alert.ProdServiceReference.IPhoneLogicService {
        
        public PhoneLogicServiceClient() {
        }
        
        public PhoneLogicServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public PhoneLogicServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PhoneLogicServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PhoneLogicServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public Phonelogic.Alert.ProdServiceReference.JobSummary[] GetJobSummary() {
            return base.Channel.GetJobSummary();
        }
        
        public System.Threading.Tasks.Task<Phonelogic.Alert.ProdServiceReference.JobSummary[]> GetJobSummaryAsync() {
            return base.Channel.GetJobSummaryAsync();
        }
        
        public Phonelogic.Alert.ProdServiceReference.QueueDetail[] GetQueueDetail(string jobNumber) {
            return base.Channel.GetQueueDetail(jobNumber);
        }
        
        public System.Threading.Tasks.Task<Phonelogic.Alert.ProdServiceReference.QueueDetail[]> GetQueueDetailAsync(string jobNumber) {
            return base.Channel.GetQueueDetailAsync(jobNumber);
        }
        
        public Phonelogic.Alert.ProdServiceReference.QueueDetail[] GetAllCallsInQueue() {
            return base.Channel.GetAllCallsInQueue();
        }
        
        public System.Threading.Tasks.Task<Phonelogic.Alert.ProdServiceReference.QueueDetail[]> GetAllCallsInQueueAsync() {
            return base.Channel.GetAllCallsInQueueAsync();
        }
        
        public int GetMyQueuedCalls(string sipAddress) {
            return base.Channel.GetMyQueuedCalls(sipAddress);
        }
        
        public System.Threading.Tasks.Task<int> GetMyQueuedCallsAsync(string sipAddress) {
            return base.Channel.GetMyQueuedCallsAsync(sipAddress);
        }
        
        public Phonelogic.Alert.ProdServiceReference.QueueSummary[] GetMyQueueSummary(string sipAddress) {
            return base.Channel.GetMyQueueSummary(sipAddress);
        }
        
        public System.Threading.Tasks.Task<Phonelogic.Alert.ProdServiceReference.QueueSummary[]> GetMyQueueSummaryAsync(string sipAddress) {
            return base.Channel.GetMyQueueSummaryAsync(sipAddress);
        }
        
        public Phonelogic.Alert.ProdServiceReference.QueueDetail[] GetMyQueueDetail(string sipAddress) {
            return base.Channel.GetMyQueueDetail(sipAddress);
        }
        
        public System.Threading.Tasks.Task<Phonelogic.Alert.ProdServiceReference.QueueDetail[]> GetMyQueueDetailAsync(string sipAddress) {
            return base.Channel.GetMyQueueDetailAsync(sipAddress);
        }
        
        public string[] GetRecruitersOnline() {
            return base.Channel.GetRecruitersOnline();
        }
        
        public System.Threading.Tasks.Task<string[]> GetRecruitersOnlineAsync() {
            return base.Channel.GetRecruitersOnlineAsync();
        }
        
        public string[] GetRecruitersAvailable() {
            return base.Channel.GetRecruitersAvailable();
        }
        
        public System.Threading.Tasks.Task<string[]> GetRecruitersAvailableAsync() {
            return base.Channel.GetRecruitersAvailableAsync();
        }
        
        public Phonelogic.Alert.ProdServiceReference.ActiveCall[] GetActiveCalls() {
            return base.Channel.GetActiveCalls();
        }
        
        public System.Threading.Tasks.Task<Phonelogic.Alert.ProdServiceReference.ActiveCall[]> GetActiveCallsAsync() {
            return base.Channel.GetActiveCallsAsync();
        }
        
        public void ForceReady(string recruiterUri) {
            base.Channel.ForceReady(recruiterUri);
        }
        
        public System.Threading.Tasks.Task ForceReadyAsync(string recruiterUri) {
            return base.Channel.ForceReadyAsync(recruiterUri);
        }
        
        public void PullFromQueue(string id, string recruiterUri) {
            base.Channel.PullFromQueue(id, recruiterUri);
        }
        
        public System.Threading.Tasks.Task PullFromQueueAsync(string id, string recruiterUri) {
            return base.Channel.PullFromQueueAsync(id, recruiterUri);
        }
        
        public void RecruiterDialOut(string recruiterUri, string jobNumber, string numberToDial, int callbackId) {
            base.Channel.RecruiterDialOut(recruiterUri, jobNumber, numberToDial, callbackId);
        }
        
        public System.Threading.Tasks.Task RecruiterDialOutAsync(string recruiterUri, string jobNumber, string numberToDial, int callbackId) {
            return base.Channel.RecruiterDialOutAsync(recruiterUri, jobNumber, numberToDial, callbackId);
        }
        
        public void TransferCall(string id, string recruiterUri) {
            base.Channel.TransferCall(id, recruiterUri);
        }
        
        public System.Threading.Tasks.Task TransferCallAsync(string id, string recruiterUri) {
            return base.Channel.TransferCallAsync(id, recruiterUri);
        }
        
        public void SilentMonitorCall(string id, string sipAddress) {
            base.Channel.SilentMonitorCall(id, sipAddress);
        }
        
        public System.Threading.Tasks.Task SilentMonitorCallAsync(string id, string sipAddress) {
            return base.Channel.SilentMonitorCallAsync(id, sipAddress);
        }
        
        public void BargeIntoCall(string id, string sipAddress) {
            base.Channel.BargeIntoCall(id, sipAddress);
        }
        
        public System.Threading.Tasks.Task BargeIntoCallAsync(string id, string sipAddress) {
            return base.Channel.BargeIntoCallAsync(id, sipAddress);
        }
        
        public void DispatchCallInQueue(string id, string sipAddress) {
            base.Channel.DispatchCallInQueue(id, sipAddress);
        }
        
        public System.Threading.Tasks.Task DispatchCallInQueueAsync(string id, string sipAddress) {
            return base.Channel.DispatchCallInQueueAsync(id, sipAddress);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ProdServiceReference.IPolicyRetriever")]
    public interface IPolicyRetriever {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPolicyRetriever/GetSilverlightPolicy", ReplyAction="http://tempuri.org/IPolicyRetriever/GetSilverlightPolicyResponse")]
        System.IO.Stream GetSilverlightPolicy();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPolicyRetriever/GetSilverlightPolicy", ReplyAction="http://tempuri.org/IPolicyRetriever/GetSilverlightPolicyResponse")]
        System.Threading.Tasks.Task<System.IO.Stream> GetSilverlightPolicyAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPolicyRetriever/GetFlashPolicy", ReplyAction="http://tempuri.org/IPolicyRetriever/GetFlashPolicyResponse")]
        System.IO.Stream GetFlashPolicy();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPolicyRetriever/GetFlashPolicy", ReplyAction="http://tempuri.org/IPolicyRetriever/GetFlashPolicyResponse")]
        System.Threading.Tasks.Task<System.IO.Stream> GetFlashPolicyAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IPolicyRetrieverChannel : Phonelogic.Alert.ProdServiceReference.IPolicyRetriever, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PolicyRetrieverClient : System.ServiceModel.ClientBase<Phonelogic.Alert.ProdServiceReference.IPolicyRetriever>, Phonelogic.Alert.ProdServiceReference.IPolicyRetriever {
        
        public PolicyRetrieverClient() {
        }
        
        public PolicyRetrieverClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public PolicyRetrieverClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PolicyRetrieverClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PolicyRetrieverClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.IO.Stream GetSilverlightPolicy() {
            return base.Channel.GetSilverlightPolicy();
        }
        
        public System.Threading.Tasks.Task<System.IO.Stream> GetSilverlightPolicyAsync() {
            return base.Channel.GetSilverlightPolicyAsync();
        }
        
        public System.IO.Stream GetFlashPolicy() {
            return base.Channel.GetFlashPolicy();
        }
        
        public System.Threading.Tasks.Task<System.IO.Stream> GetFlashPolicyAsync() {
            return base.Channel.GetFlashPolicyAsync();
        }
    }
}
